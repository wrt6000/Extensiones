/* ========================================================================
 * Copyright 2014 monitor
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 monitor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.201408112050

*/

package co.edu.uniandes.csw.monitor.member.master.logic.ejb;

import co.edu.uniandes.csw.monitor.address.logic.dto.AddressDTO;
import co.edu.uniandes.csw.monitor.address.persistence.api.IAddressPersistence;
import co.edu.uniandes.csw.monitor.member.logic.dto.MemberDTO;
import co.edu.uniandes.csw.monitor.member.persistence.api.IMemberPersistence;
import co.edu.uniandes.csw.monitor.sport.logic.dto.SportDTO;
import co.edu.uniandes.csw.monitor.sport.persistence.api.ISportPersistence;
import co.edu.uniandes.csw.monitor.member.logic.dto.MemberDTO;
import co.edu.uniandes.csw.monitor.member.master.logic.api._IMemberMasterLogicService;
import co.edu.uniandes.csw.monitor.member.master.logic.dto.MemberMasterDTO;
import co.edu.uniandes.csw.monitor.member.master.persistence.api.IMemberMasterPersistence;
import co.edu.uniandes.csw.monitor.member.master.persistence.entity.MemberaddressesEntity;
import co.edu.uniandes.csw.monitor.member.master.persistence.entity.MemberrelativesEntity;
import co.edu.uniandes.csw.monitor.member.master.persistence.entity.MembersportsEntity;
import co.edu.uniandes.csw.monitor.member.persistence.api.IMemberPersistence;
import javax.inject.Inject;

public abstract class _MemberMasterLogicService implements _IMemberMasterLogicService {

    @Inject
    protected IMemberPersistence memberPersistance;
    @Inject
    protected IMemberMasterPersistence memberMasterPersistance;
    @Inject
    protected ISportPersistence sportPersistance;
    @Inject
    protected IAddressPersistence addressPersistance;

    public MemberMasterDTO createMasterMember(MemberMasterDTO member) {
        MemberDTO persistedMemberDTO = memberPersistance.createMember(member.getMemberEntity());
        if (member.getCreateaddresses() != null) {
            for (AddressDTO addressDTO : member.getCreateaddresses()) {
                AddressDTO createdAddressDTO = addressPersistance.createAddress(addressDTO);
                MemberaddressesEntity memberAddressEntity = new MemberaddressesEntity(persistedMemberDTO.getId(), createdAddressDTO.getId());
                memberMasterPersistance.createMemberaddressesEntity(memberAddressEntity);
            }
        }
        if (member.getCreaterelatives() != null) {
            for (MemberDTO memberDTO : member.getCreaterelatives()) {
                MemberDTO createdMemberDTO = memberPersistance.createMember(memberDTO);
                MemberrelativesEntity memberMemberEntity = new MemberrelativesEntity(persistedMemberDTO.getId(), createdMemberDTO.getId());
                memberMasterPersistance.createMemberrelativesEntity(memberMemberEntity);
            }
        }
        if (member.getCreatesports() != null) {
            for (SportDTO sportDTO : member.getCreatesports()) {
                SportDTO createdSportDTO = sportPersistance.createSport(sportDTO);
                MembersportsEntity memberSportEntity = new MembersportsEntity(persistedMemberDTO.getId(), createdSportDTO.getId());
                memberMasterPersistance.createMembersportsEntity(memberSportEntity);
            }
        }
        // update address
        if (member.getUpdateaddresses() != null) {
            for (AddressDTO addressDTO : member.getUpdateaddresses()) {
                addressPersistance.updateAddress(addressDTO);
                MemberaddressesEntity memberAddressEntity = new MemberaddressesEntity(persistedMemberDTO.getId(), addressDTO.getId());
                memberMasterPersistance.createMemberaddressesEntity(memberAddressEntity);
            }
        }
        // update member
        if (member.getUpdaterelatives() != null) {
            for (MemberDTO memberDTO : member.getUpdaterelatives()) {
                memberPersistance.updateMember(memberDTO);
                MemberrelativesEntity memberMemberEntity = new MemberrelativesEntity(persistedMemberDTO.getId(), memberDTO.getId());
                memberMasterPersistance.createMemberrelativesEntity(memberMemberEntity);
            }
        }
        // update sport
        if (member.getUpdatesports() != null) {
            for (SportDTO sportDTO : member.getUpdatesports()) {
                sportPersistance.updateSport(sportDTO);
                MembersportsEntity memberSportEntity = new MembersportsEntity(persistedMemberDTO.getId(), sportDTO.getId());
                memberMasterPersistance.createMembersportsEntity(memberSportEntity);
            }
        }
        return member;
    }

    public MemberMasterDTO getMasterMember(Long id) {
        return memberMasterPersistance.getMember(id);
    }

    public void deleteMasterMember(Long id) {
        memberPersistance.deleteMember(id);
    }

    public void updateMasterMember(MemberMasterDTO member) {
        memberPersistance.updateMember(member.getMemberEntity());

        //---- FOR RELATIONSHIP
        // persist new address
        if (member.getCreateaddresses() != null) {
            for (AddressDTO addressDTO : member.getCreateaddresses()) {
                AddressDTO createdAddressDTO = addressPersistance.createAddress(addressDTO);
                MemberaddressesEntity memberAddressEntity = new MemberaddressesEntity(member.getMemberEntity().getId(), createdAddressDTO.getId());
                memberMasterPersistance.createMemberaddressesEntity(memberAddressEntity);
            }
        }
        // update address
        if (member.getUpdateaddresses() != null) {
            for (AddressDTO addressDTO : member.getUpdateaddresses()) {
                addressPersistance.updateAddress(addressDTO);
            }
        }
        // delete address
        if (member.getDeleteaddresses() != null) {
            for (AddressDTO addressDTO : member.getDeleteaddresses()) {
                memberMasterPersistance.deleteMemberaddressesEntity(member.getMemberEntity().getId(), addressDTO.getId());
                addressPersistance.deleteAddress(addressDTO.getId());
            }
        }
        // delete member
        if (member.getDeleterelatives() != null) {
            for (MemberDTO memberDTO : member.getDeleterelatives()) {
                memberMasterPersistance.deleteMemberrelativesEntity(member.getMemberEntity().getId(), memberDTO.getId());
            }
        }
        // persist new member
        if (member.getCreaterelatives() != null) {
            for (MemberDTO memberDTO : member.getCreaterelatives()) {
                MemberrelativesEntity memberMemberEntity = new MemberrelativesEntity(member.getMemberEntity().getId(), memberDTO.getId());
                memberMasterPersistance.createMemberrelativesEntity(memberMemberEntity);
            }
        }
        // update member
        if (member.getUpdaterelatives() != null) {
            for (MemberDTO memberDTO : member.getUpdaterelatives()) {
                memberMasterPersistance.deleteMemberrelativesEntity(member.getMemberEntity().getId(), memberDTO.getId());
                memberPersistance.updateMember(memberDTO);
                MemberrelativesEntity memberMemberEntity = new MemberrelativesEntity(member.getId(), memberDTO.getId());
                memberMasterPersistance.createMemberrelativesEntity(memberMemberEntity);
                
            }
        }
        // delete sport
        if (member.getDeletesports() != null) {
            for (SportDTO sportDTO : member.getDeletesports()) {
                memberMasterPersistance.deleteMembersportsEntity(member.getMemberEntity().getId(), sportDTO.getId());
            }
        }
        // persist new sport
        if (member.getCreatesports() != null) {
            for (SportDTO sportDTO : member.getCreatesports()) {
                MembersportsEntity memberSportEntity = new MembersportsEntity(member.getMemberEntity().getId(), sportDTO.getId());
                memberMasterPersistance.createMembersportsEntity(memberSportEntity);
            }
        }
        // update sport
        if (member.getUpdatesports() != null) {
            for (SportDTO sportDTO : member.getUpdatesports()) {
                memberMasterPersistance.deleteMembersportsEntity(member.getMemberEntity().getId(), sportDTO.getId());
                sportPersistance.updateSport(sportDTO);
                MembersportsEntity memberSportEntity = new MembersportsEntity(member.getId(), sportDTO.getId());
                memberMasterPersistance.createMembersportsEntity(memberSportEntity);
                
            }
        }
    }
}
